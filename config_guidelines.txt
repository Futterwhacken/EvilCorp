Exploitations:

    possèdent un rateProductivity et rateVisibility (aka pollution)

    pour l'instant la config est:

    primaire:
        rP = 1
        rV = 2
    secondaire:
        rP = 1
        rV = 1
    tertiaire:
        rP = 1
        rV = 0.5


Paramètres:

    s'appliquent au rates de productivité, pollution(visibilité) et social d'une zone

    peuvent prendre trois valeurs: 0 1 2 ========> c'est ce que tu dois paramétrer par zone
    qui détermineront le modifieur à applique: 0.5  1.0   2.0
                j'abrège ces modifieurs par   mod-  mod=  mod+


    tolérance activité (tA):
        émule """richesse du pays"""

        modification appliquée à une exploitation:
            tauxProductivité * modifieur(Cagégorie) -> (primaire, secondaire, tertiare)

        0 = zone pauvre
            primaire : mod+
            secondaire: mod-
            tertiaire: mod=
        1 = zone moyenne
            p : mod=
            s : mod+
            t : mod=
        2 = zone riche
            p : mod-
            s : mod=
            t : mod+

    tolérance environnementale (tE):

        émule normes environnementales de la zone

        modification s'applique à la somme des rateProductivity et rateVisibility
        des exploitations d'une zone (rateProductivity ayant déjà été modifié par tActivity)

        0 = peu de normes
            -> rateProductivity * mod+
            -> rateVisibility * mod+
        1 = moyen
            -> rateProductivity * mod=
            -> rateVisibility * mod=
        2 = très normé
            -> rateProductivity * mod-
            -> rateVisibility * mod-

    tolérance de l'opposition politique (tO):

        émule type de gouvernement et sa tolérance de l'opposition

        modificiation s'applique au rateSocial qui est d'abord calculé à partir
        de la jauge de pollution (visibilité) d'une zone

        0 = peu de tolérance
            -> rateSocial * mod-
        1 = tolérance moyenne
            -> rateSocial * mod=
        2 = grande tolérance / anticapitalisme favorisé ======> zone dure à exploiter
            -> rateSocial * mod+


Events:
    Champs d'un event
        name, description, source, (strings)
        effectsParams, effectsGauges, (tableaux)
        duration, uses (ints)

    duration est le nombre de tour pendant lequel l'event sera actif
    uses est le nombre d'utilisation/triggers possibles de l'event, -1 pour utilisation/trigger infini

    effectsParams est un tableau à 1 dimension de longueur 3

    effectsParams[0] concerne le changement à apporter au paramètre tActivity
    effectsParams[1] concerne le changement à apporter au paramètre tEnvironment
    effectsParams[2] concerne le changement à apporter au paramètre tOpposition

    ces cases peuvent prendre 6 valeurs différentes:

        -1 = ne rien faire
        0 = set le paramètre à 0
        1 = set le paramètre à 1
        2 = set le paramètre à 2
        3 = diminuer le paramètre de 1
        4 = augmenter le paramètre de 1

    effectsGauges est un tableau à 1 dimension de longueur 3

    effectsGauges[0] contient la valeur par laquelle il faut changer la jauge de Productivité
    effectsGauges[1] contient la valeur par laquelle il faut changer la jauge de Visibilité (pollution)
    effectsGauges[2] contient la valeur par laquelle il faut changer la jauge de Social

    donc ce sont des doubles du type: -25.0, 10.0, 45.5, -5.3


EventBuyable:

    a un coût, à déterminer en testant le jeu mais tu
    peux déjà dire si c'est un event qui coûte chère, moyen ou pas chère

EventTriggerable:

    deux tableaux:

    double[3] conditions
    int[3] conditionType

    le tableau condition comporte les valeurs à comparer avec les jauges
        conditions[0] pour jauge Productivité
        conditions[1] pour jauge Visibilité
        conditions[2] pour jauge Social

    le tableau conditionType contient les indications sur quel type
    de comparaison il faut opérer et chaque case peut prendre 3 valeurs:

        0 : il faut comparer si niveauJauge <= condition
        1 : il faut comparer si niveauJauge == condition
        2 : il faut comparer si niveauJauge >= condition

        conditionType[0] pour comparaison jauge Productivité
        conditionType[1] pour comparaisonjauge Visibilité
        conditionType[2] pour comparaison jauge Social


    !!! pour exprimer le fait qu'une jauge n'est pas considérée dans les conditions
    il suffit de set le conditionType[i] à 2 et conditions[i] à 0.0  (ou bien 0 et 100.0)

    donc par exemple pour le trigger d'une grève générale/révolution on aurait:

        conditions    = {0.0, 0.0, 100.0}
        conditionType =  { 2,   2,   1}

        et ça va donc tester si la jauge social de la zone == 100.0 et s'en foutre
        des deux autres jauges puisque 0.0 et 2 veut dire: n'importe quelle valeur au dessus de 0 ou égale à 0




















    #
